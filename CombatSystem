//============================================================================
// Name        : CombatSystem.cpp
// Author      : Aaron Gaskin
// Description : Combat System method, will take in a character and monster object.
//				 Then it will take in player choice as the character fights the monster.
//============================================================================

#include "CombatSystem.h"
#include "CharacterCreation.cpp"
#include "MonsterGeneration.cpp"

/******************
 * Name: intCheck
 * Needs: string
 * Outputs: int
 * Purpose: checks a string of user input to verify that it is an integer
 ******************/
int intCheck(string userChoice)
{
	//initializing variables for later use
	bool check = true;
	int x = 0;

	//loop that checks the users choice is an int
	do
	{
		//parsing input string to determine if it's an int
		//copied from my pa1.cpp assignment
		//obtained from stack Overflow "Check if the input is a number or string in C++"
		stringstream userParse(userChoice);

		//checking if the parse can be put into an int
		if(!(userParse >> x).fail())
		{
			userParse >> x;			//passing parse value to x
			check = false;
		}
		else			//if parse test fails, asks user for an integer
		{
			cout << "Invalid input!" << "\n" << "Please enter a valid integer: ";
			cin >> userChoice;
		}
	}while(check);

	//return valid integer
	return x;
}

bool combatSystem(Player* player, monster* mon)
{
	//set up values for player
	string choice = "";
	int intChoice = 0;
	int charHealth = player->getHealth();
	int charMana = player->getCurMana();
	int charDamage = player->getDmg();
	int charDefense = player->getDef();

	//set up values for monster
	int monHealth = mon->getHP();
	int monDamage = mon->getDAMAGE();
	int monDefense = mon->getDEFENSE();
	string monName = mon->getMONSTER();

	//setting damage values
	int charAttack = charDamage - monDefense;
	if(charAttack <= 0)		//ensuring the player deals at least 1 damage
	{
		charAttack = 1;
	}
	int monAttack = monDamage - charDefense;
	if(monAttack <= 0)		//ensuring monster deals at least 1 damage
	{
		monAttack = 1;
	}
	while(true)
	{
		//outputs info to user
		cout << "You have " << charHealth << " HP and " << charDamage << " attack." <<endl;

		//ask for user's choice
		cout << "What would you like to do?\n";
		cout << "1.) Basic Attack\n2.) Use Skill\n3.) Use Item" << endl;
		cin >> choice;
		//verify that it is an integer
		intChoice = intCheck(choice);

		//perform action based on user choice
		switch(intChoice)
		{
			case 1: cout << "You strike the " << monName << " It takes " << charAttack << " damage." << endl;
					monHealth = monHealth - charAttack;
					//check if monster is dead
					if(monHealth <= 0)
					{
						return true;
					}
					//if not dead then monster hits player
					cout << "The " << monName << " fights back! Take " << monAttack << " damage." << endl;
					player->setHealth(charHealth - monAttack);
					charHealth = player->getHealth();
					break;
			case 2:			//TODO: implement skills
					break;
			case 3:			//TODO: instead of item do block/dodge?
					break;
			default: cout << "Invalid choice!" << endl;
		}

		//Check if the player is dead
		if(charHealth <= 0)
		{
			return false;
		}

		//output how much health the monster has
		cout << "The vile " << monName << " still has " << monHealth << " HP left!" << endl;
	}
}


int main() {
	//character stats
	Archer* character = new Archer(10, 5, 10, "olaf");

	//monster stats
	monster* mon = new monster(2);

	//if true then player killed monster, if false then player died
	if(combatSystem( character, mon))
	{
		cout << "HAZZAH! You have slain the beast!" << endl;
	}
	else
	{
		cout << "Alas, your journey has come to a rather unfortunate end.\n";
		cout << "The dungeon proves too strong for yet another adventurer." << endl;
	}

	return 0;
}

bool combatSystem(Player* player, monster* mon)
{
	//set up values for player
	string choice = "";
	int intChoice = 0;
	int charHealth = player->getHealth();
	int charMana = player->getCurMana();
	int charDamage = player->getDmg();
	int charDefense = player->getDef();

	//set up values for monster
	int monHealth = mon->getHP();
	int monDamage = mon->getDAMAGE();
	int monDefense = mon->getDEFENSE();
	string monName = mon->getMONSTER();

	//setting damage values
	int charAttack = charDamage - monDefense;
	if(charAttack <= 0)		//ensuring the player deals at least 1 damage
	{
		charAttack = 1;
	}
	int monAttack = monDamage - charDefense;
	if(monAttack <= 0)		//ensuring monster deals at least 1 damage
	{
		monAttack = 1;
	}
	while(true)
	{
		//outputs info to user
		cout << "You have " << charHealth << " HP and " << charDamage << " attack." <<endl;

		//ask for user's choice
		cout << "What would you like to do?\n";
		cout << "1.) Basic Attack\n2.) Use Skill\n3.) Use Item" << endl;
		cin >> choice;
		//verify that it is an integer
		intChoice = intCheck(choice);

		//perform action based on user choice
		switch(intChoice)
		{
			case 1: cout << "You strike the " << monName << ". It takes " << charAttack << " damage." << endl;
					monHealth = monHealth - charAttack;
					//check if monster is dead
					if(monHealth <= 0)
					{
						return true;
					}
					//if not dead then monster hits player
					cout << "The " << monName << " fights back! Take " << monAttack << " damage." << endl;
					player->setHealth(charHealth - monAttack);
					charHealth = player->getHealth();
					break;
			case 2:			//TODO: implement skills
					break;
			case 3:			//TODO: instead of item do block/dodge?
					break;
			default: cout << "Invalid choice!" << endl;
		}

		//Check if the player is dead
		if(charHealth <= 0)
		{
			return false;
		}

		//output how much health the monster has
		cout << "The vile " << monName << " still has " << monHealth << " HP left!" << endl;
	}
}
