/**
*Created By: Dylan Alvarez
*Contains:The methods that go with the classes defined by the Character_Creation_H
*/
#include <iostream>
#include <string>
//Defining the methods inherited from the abstract Player class
int Knight::getDmg()
{
  return this->dmg;
}
int Knight::getDef()
{
  return this->def;
}
int Knight::getCurMana()
{
  return this->curMana;
}
void Knight::setCurMana(int mana)
{
  this->curMana = mana;
}
int Knight::getMaxMana()
{
  return this->maxMana;
}
int Knight::getLvl()
{
  return this->lvl;
}
string Knight::getName()
{
  return this->name;
}
void Knight::setLvl(int lvl)
{
  (this->lvl) = lvl;
}
void Knight::lvlUp()
{
  this->setLvl(this->getLvl()+1);
}
int Knight::getHealth()
{
  return this->curHP;
}
void Knight::setHealth(int health)
{
  this->curHP = health;
}
int Knight::getMaxHP()
{
  return this->maxHP;
}
void Knight::setMaxHP(int hp)
{
	this->maxHP = hp;
}
string Knight::getClass()
{
  return className;
}

//Skill: returns an int for now, can become its own algorithm though
int Knight::styleishSpin()
{
  if((this->getLvl() < 2) && (curMana >= 2)) //Check if player is high enough level to use new skill
  {
    return -1;
  }
  else
  {
     curMana = curMana - 2;
	   return 2 + ((this->getLvl())*.5) + (this->getDmg());
  }
}

int Knight::shieldBash()
{
  if((this->getLvl() < 3) && (curMana >= 4)) //Check if player is high enough level to use new skill
  {
    return -1;
  }
  else
  {
     curMana = curMana - 4;
	   return 3 + ((this->getLvl())*.5) + (this->getDmg());
  }
}
int Knight::demacianJudgement()
{
  if((this->getLvl() < 4) && (curMana >= 6)) //Check if player is high enough level to use new skill
  {
    return -1;
  }
  else
  {
     curMana = curMana - 6;
     return 4 + ((this->getLvl())*.5) + (this->getDmg());
  }
}

int Knight::foolishCourage()
{
  if((this->getLvl() < 5) && (curMana >= 8)) //Check if player is high enough level to use new skill
  {
    return -1;
  }
  else
  {
     curMana = curMana - 8;
	   return 5 + ((this->getLvl())*.5) + (this->getDmg());
  }
}


//Defining the methods inherited from the abstract Player class
int Archer::getDmg()
{
  return this->dmg;
}
int Archer::getDef()
{
  return this->def;
}
int Archer::getCurMana()
{
  return this->curMana;
}
void Archer::setCurMana(int mana)
{
  this->curMana = mana;
}
int Archer::getMaxMana()
{
  return this->maxMana;
}
int Archer::getLvl()
{
  return this->lvl;
}
string Archer::getName()
{
  return this->name;
}
void Archer::setLvl(int lvl)
{
  (this->lvl) = lvl;
}
void Archer::lvlUp()
{

  this->setLvl(this->getLvl()+1);
}
int Archer::getHealth()
{
  return this->curHP;
}
void Archer::setHealth(int health)
{
  this->curHP = health;
}
int Archer::getMaxHP()
{
  return this->maxHP;
}
void Archer::setMaxHP(int hp)
{
	this->maxHP = hp;
}
string Archer::getClass()
{
  return className;
}

//Skill: returns an int for now, can become its own algorithm though
int Archer::snipe()
{
  if((this->getLvl() < 2) && (curMana >= 2)) //Check if player is high enough level to use new skill
  {
    return -1;
  }
  else
  {
     curMana = curMana - 2;
	   return 2 + ((this->getLvl())*.5) + (this->getDmg());
  }
}

int Archer::luckyShot()
{
  if((this->getLvl() < 3) && (curMana >= 4)) //Check if player is high enough level to use new skill
  {
    return -1;
  }
  else
  {
     curMana = curMana - 4;
	   return 3 + ((this->getLvl())*.5) + (this->getDmg());
  }
}
int Archer::hailMary()
{
  if((this->getLvl() < 4) && (curMana >= 6)) //Check if player is high enough level to use new skill
  {
    return -1;
  }
  else
  {
     curMana = curMana - 6;
     return 4 + ((this->getLvl())*.5) + (this->getDmg());
  }
}


int Archer::oneInAMillion()
{
  if((this->getLvl() < 5) && (curMana >= 8)) //Check if player is high enough level to use new skill
  {
    return -1;
  }
  else
  {
     curMana = curMana - 8;
	   return 5 + ((this->getLvl())*.5) + (this->getDmg());
  }
}


//Defining the methods inherited from the abstract Player class
int Caster::getDmg()
{
  return this->dmg;
}
int Caster::getDef()
{
  return this->def;
}
int Caster::getCurMana()
{
  return this->curMana;
}
void Caster::setCurMana(int mana)
{
  this->curMana = mana;
}
int Caster::getMaxMana()
{
  return this->maxMana;
}
int Caster::getLvl()
{
  return this->lvl;
}
string Caster::getName()
{
  return this->name;
}
void Caster::setLvl(int lvl)
{
  (this->lvl) = lvl;
}
void Caster::lvlUp()
{
  this->setLvl(this->getLvl()+1);
}
int Caster::getHealth()
{
  return this->curHP;
}
void Caster::setHealth(int health)
{
  this->curHP = health;
}
int Caster::getMaxHP()
{
  return this->maxHP;
}
void Caster::setMaxHP(int hp)
{
	this->maxHP = hp;
}
string Caster::getClass()
{
  return className;
}

//Skill: returns an int for now, can become its own algorithm though
int Caster::balefulStrike()
{
  if((this->getLvl() < 2) && (curMana >= 2)) //Check if player is high enough level to use new skill
  {
    return -1;
  }
  else
  {
     curMana = curMana - 2;
	   return 2 + ((this->getLvl())*.5) + (this->getDmg());
  }
}

int Caster::darkMatter()
{
  if((this->getLvl() < 3) && (curMana >= 4)) //Check if player is high enough level to use new skill
  {
    return -1;
  }
  else
  {
     curMana = curMana - 4;
	   return 3 + ((this->getLvl())*.5) + (this->getDmg());
  }
}
int Caster::eventHorizon()
{
  if((this->getLvl() < 4) && (curMana >= 6)) //Check if player is high enough level to use new skill
  {
    return -1;
  }
  else
  {
     curMana = curMana - 6;
     return 4 + ((this->getLvl())*.5) + (this->getDmg());
  }
}

int Caster::primordialBurst()
{
  if((this->getLvl() < 5) && (curMana >= 8)) //Check if player is high enough level to use new skill
  {
    return -1;
  }
  else
  {
     curMana = curMana - 8;
	   return 5 + ((this->getLvl())*.5) + (this->getDmg());
  }
}
